#include <iostream>
#include <fstream>
#include <ctime>
#include <iomanip>
#include "absMatrix.h"
#include "denseMatrix.h"
#include "Math_Vector.h"
#include "steepestDescent.h"
#include "symmetricMatrix.h"
#include "GaussSeidel.h"
#include "GaussianInverse.h"
#include "CenterDiffMesh.h"
#include "boundaryFunctions.h"
using namespace std;



int main(int argc, char* argv[])
{
    try
    {
        cout << setprecision(8);
    
        if(argc != 2)
            throw std::invalid_argument("The must be at exactly two command line arguments");
    
    
        int numOfSubDivisions = atoi(argv[1]); //control mesh density
        symmetricMatrix<double> A;              //A whose values will be generated by CenterDiffMesh
        Math_Vector<double> b;                  //b whose values will be generated by CenterDiffMesh
        Math_Vector<double> xApprox((numOfSubDivisions-1)*(numOfSubDivisions-1));  //holds the results of iterative methods
        CenterDiffMesh<double,double,double, xLower, xUpper, yLower, yUpper> dirichlet; //constructs A and b
        steepestDescent steepDescent;
        GaussSeidel gausSied;
        double errTollerance = 0.00000001;
    
        dirichlet.setSubdivisions(numOfSubDivisions);
        dirichlet(A,b);
    
        cout << "A = " << endl;
        cout << A << endl;
    
        cout << "=== Steepest Descent ===" << endl;
        steepDescent.setTollerance(errTollerance);
        xApprox = steepDescent(A,b);
        cout << "x = " << endl;
        cout << xApprox << endl;
        cout << "b = " << endl;
        cout << b << endl;
        cout << "A*x = " << endl;
        cout << A*xApprox << endl;
    
        cout << "=== Gauss Seidel ===" << endl;
        gausSied.setTollerance(errTollerance);
        xApprox = gausSied(A,b);
        cout << "x = " << endl;
        cout << xApprox << endl;
        cout << "b = " << endl;
        cout << b << endl;
        cout << "A*x = " << endl;
        cout << A*xApprox << endl;


        cout << "=== Comparison ===" << endl;
        cout << " Iterations (Gauss-Seidel) = .................. " << gausSied.getFinalIterations() << endl;
        cout << " Iterations (Steepest Descent) = .............. " << steepDescent.getFinalIterations() << endl;
        cout << " Tollerance (for both)......................... " << errTollerance << endl;
        cout << " Final approx error magnitude (Gauss-Seidel) =  " << gausSied.getFinalResidualMag() << endl;
        cout << " Final approx error (Steepest Descent) = ...... " << steepDescent.getFinalResidualMag() << endl;
        cout << endl << endl;
    }
    catch(std::invalid_argument& e)
    {
        cout << e.what() << endl;
    }

    return 0;
}